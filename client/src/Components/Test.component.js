import React,{useState,useEffect} from 'react';
import axios from 'axios';
import './css/Test.css';

const Test = ()=>{
    const [loaded,setLoaded] = useState(false);
    const [easyQuestions,setEasyQuestions] = useState([]);
    const [mediumQuestions,setMediumQuestions] = useState([]);
    const [hardQuestions,setHardQuestions] = useState([]);
    const [scoreArray, setScoreArray] = useState([0,0])
    const [percentageArray,setPercentageArray] = useState([0],false);
    const [started,setStarted] = useState(false);
    const[currentQuestion,setCurrentQuestion] = useState(null);
    const [currentAnswer,setCurrentAnswer] = useState('');
    const [currentOptions,setCurrentOptions] = useState([]);

    useEffect(()=>{
        const username = sessionStorage.getItem('username');
        if(username===null)
            window.location='/';
        axios.get('/api/questions/view')
            .then(res=>{
                setEasyQuestions(res.data.filter(question=>question.difficulty==="Easy"));
                setMediumQuestions(res.data.filter(question=>question.difficulty==="Medium"));
                setHardQuestions(res.data.filter(question=>question.difficulty==="Hard"));
                setLoaded(true);
            })
    },[])

    const startTest = ()=>{
        setStarted(true);
    }

    useEffect(()=>{
        if(loaded){
            if(percentageArray[0]<35){
                const random = Math.floor(Math.random()*easyQuestions.length);
                const question = easyQuestions[random];
                setCurrentQuestion(question);
                setEasyQuestions(easyQuestions.filter(thisquestion=>thisquestion!==question));
            }
            else if(percentageArray[0]>66){
                const random = Math.floor(Math.random()*hardQuestions.length);
                const question = hardQuestions[random];
                setCurrentQuestion(question);
                setHardQuestions(hardQuestions.filter(thisquestion=>thisquestion!==question));
            }
            else{
                const random = Math.floor(Math.random()*mediumQuestions.length);
                const question = mediumQuestions[random];
                setCurrentQuestion(question);
                setMediumQuestions(mediumQuestions.filter(thisquestion=>thisquestion!==question));
            }
        }
    },[percentageArray,loaded])

    useEffect(()=>{
        if(currentQuestion!==null){
            var currentOptions = currentQuestion.options;
            var options = []
            for(var i=4; i>=1; i--){
                const random = Math.floor(Math.random()*i);
                options[i-1]=currentOptions[random];
                currentOptions.splice(random,1)
            }
            setCurrentAnswer(options[0]);
            setCurrentOptions(options);
        }
            
    },[currentQuestion])


    const handleAnswerChange = e=>{setCurrentAnswer(e.target.value)}

    const nextQuestion = e=>{
        e.preventDefault();
        if(scoreArray[0]===19){
            var percentage=0;
            if(currentQuestion.answer===currentAnswer){
                percentage = (scoreArray[1]+1)*100/(scoreArray[0]+1);
            }
            else
                percentage = (scoreArray[1]*100)/scoreArray[0]+1;
            const newReport = {
                user: sessionStorage.getItem('username'),
                score: percentage,
                date: new Date(),
                suggestion: "abc"
            }
            axios.post('/api/reports/create',newReport)
                .then(res=>{
                    if(res.data==="success"){
                        window.location = '/viewreports/'+sessionStorage.getItem('username');
                    }
                })
        }
        else{
            if(currentAnswer===currentQuestion.answer){
                setScoreArray([scoreArray[0]+1,scoreArray[1]+1])
            }
            else
                setScoreArray([scoreArray[0]+1,scoreArray[1]])
        }
    }

    

    useEffect(()=>{
        setPercentageArray([scoreArray[1]/scoreArray[0]*100,!percentageArray[1]]);
    },[scoreArray])

    const loadPage = ()=>{
        if(loaded && !started){
            return(
                <div className="jumbotron">
                    <h1>Welcome to the test!</h1>
                    <div>
                    <h2 className="text-center">Instructions</h2>
                    <ul>
                        <li>You must answer 20 Multiple Choice Questions.</li>
                        <li>Each question has a difficulty level associated with it.</li>
                        <li>The level of difficulty of the next question depends on your current score.</li>
                        <li>After submitting the test you will be redirected to a report page.</li>
                        <li>On this page you can view your score and suggestions generated by the system.</li>
                    </ul>
                    </div>
                    <button className="btn btn-primary" onClick={()=>startTest()}>Start Test</button>
                </div>
            );
        }
        else if(loaded && started){
            return(
                <div className="jumbotron" id="testjumbotron">
                    <div id="topdiv">
                        <h4>Difficulty: {currentQuestion.difficulty}</h4>
                        <h4>Percentage: {percentageArray[0].toFixed(2)}</h4>
                    </div>
                    <div>
                        <h3>Q.{scoreArray[0]+1}) {currentQuestion.text}</h3>
                    </div>
                    <form onSubmit={nextQuestion}>
                        {currentOptions.map((option,index)=>{
                            if(index==0)
                                return(
                                    <React.Fragment>
                                        <input type="radio" checked name="ans" onChange={handleAnswerChange} value={option}/>{option}<br/>
                                    </React.Fragment>
                                );
                            else{
                                return (
                                    <React.Fragment>
                                        <input type="radio" name="ans" onChange={handleAnswerChange} value={option}/>{option}<br/>
                                    </React.Fragment>
                                );
                            }
                        })}
                        <input type="submit" ></input>
                    </form>
                </div>
            )
        }
    }

    return(
        <div id="test">
            {loadPage()}
        </div>
    );
}

export default Test;